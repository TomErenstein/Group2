//NEW
var player1Cards;
var root;
var base;
var deck;
var selected1;
var selected2;
var chosen1 = false;
var rootchosen = false;
var cardchosen = false;


var delay = 10;
//DELAYS
var playercardsdelay= 300;
var basecardsdelay= 250;
var rootcardsdelay= 250;
var deckcardsdelay= 25;
var choosedelay= 10;
var updatedelay= 50;
/**var delay = 10;
//DELAYS
var playercardsdelay= 10;
var basecardsdelay= 100;
var rootcardsdelay= 100;
var deckcardsdelay= 25;
var choosedelay= 10;
var updatedelay= 50;**/

//LOAD cards
function preload() {      
    //game.load.spritesheet("cards", "./images/cards.png", 61.5, 81, 52);    
    game.load.spritesheet("cards", "./images/cards.png", 61.5, 81, 52);
}

//MOVING all children
function layoutGroup(group, x, y, spread, delay) {        //move X
    var startX = x - group.children.length * spread * 0.5;
    for (var i = 0; i < group.children.length; i++) {
        var child = group.children[i];
        game.add.tween(child).to({ x: startX + i * spread, y: y }, 500, Phaser.Easing.Quadratic.Out, true, i*delay);
    }
}

function layoutGroup2(group, x, y, spread, delay) {        //move Y 
    var startY = y - group.children.length * spread * 0.5;
    for (var i = 0; i < group.children.length; i++) {
        var child = group.children[i];
        game.add.tween(child).to({ x: x, y: startY + i * spread }, 500, Phaser.Easing.Quadratic.Out, true, i*delay);
    }
}


function create() {
    // create card GROUPS
    player1Cards = game.add.group();
    deck = game.add.group();
    root = game.add.group();
    base = game.add.group();
    selected1 = game.add.group();
    selected2 = game.add.group();
    
    var values1 = [90,83,49,36,11,80,65,94,69,70,39,63,80,67,73,57,18,65,70,33,68,35,60,95,68,46,77,78,58,28,13,50,54,44,80,42,40,81,65,65,38,80,55,94,68,63,90,93,95,86,74,71,100,49,60,57,80,31,34,80,58,66,92,90,35,40,61,81,70];
    var values2 = [20,18,46,90,55,20,75,52,38,30,80,23,20,13,33,58,74,30,25,63,71,67,35,6,25,80,48,14,41,70,54,76,46,70,38,60,60,30,30,30,80,30,14,32,60,27,30,39,25,25,20,27,52,65,18,51,35,71,68,35,17,37,25,25,89,91,36,12,20];
    var values3 = [80,20,56,61,79,55,54,32,49,40,52,28,66,64,40,57,16,65,45,26,43,66,57,37,57,88,56,46,43,68,47,70,95,9,52,19,50,69,40,40,14,60,50,64,64,31,42,36,60,43,48,19,100,63,39,42,10,5,70,52,45,45,27,50,66,62,38,73,40];
    
    
    for (var i = 0; i < 51; i++) {    //NUMBER of cards
        var card = deck.create(50, 540, "cards");
            card.anchor.set(0.5, 0.5);
            card.frame = i;
            card.name = 'card_' + i;
            card.value1 = values1[i];
            card.value2 = values2[i];
            card.value3 = values3[i];
    };
    // Some shuffling
    /*
    for (i = 0; i < 51; i++) {
        deck.swap(deck.getRandom(), deck.getRandom());
    }*/

    // enable input for all children
    player1Cards.inputEnableChildren = true;
    root.inputEnableChildren = true;
    base.inputEnableChildren = true;
    
    // look for clicks
    player1Cards.onChildInputDown.add(chooseCard, this);
    root.onChildInputDown.add(chooseRoot, this);
    base.onChildInputDown.add(swapCard, this);
 
    //setup ROOT cards
    for (var j = 0; j < 3; j++) {
        var card = deck.removeChildAt(0);
        root.add(card);
    }
    //setup BASE cards
    for (var k = 0; k < 3; k++) {
        var card = deck.removeChildAt(0);
        base.add(card);
    }
    
    // distribute 3 cards to each player
    for (var playerID = 0; playerID < 2; playerID++) {
        for (var i = 0; i < 3; i++) {
            var card = deck.removeChildAt(0);
            if (playerID == 0) {
                player1Cards.add(card);
            }
        }
    }
    //MOVE cards
    layoutGroup(player1Cards, 400, 500, 50, playercardsdelay);
    layoutGroup(base, 500, 300, 56, basecardsdelay);
    layoutGroup2(root, 200, 300, 85, rootcardsdelay);
    
    //DECK movement
    var startX = 200 - deck.children.length * 50 * 0.5;   
    for (var i = 0; i < deck.children.length; i++) {
        var child = deck.children[i];
        game.add.tween(child).to({ x: 50, y: 50 }, 500, Phaser.Easing.Quadratic.Out, true, i*deckcardsdelay);
    }
}

function childOf(c,p){while((c=c.parentNode)&&c!==p);return !!c}
//check for children:   console.log(selected1.children)

function swapCard (card) {     //card is chosen base card    
    if (chosen1){
    console.log("Selected1");
    console.log(selected1.children);
    
    player1Cards.add(card);
    base.add(selected1.removeChildAt(0));
    selected1.remove(card);
    
    //console.log(card.children);
    console.log("BASE cards");    
    console.log(base.children);
    console.log("Player1 Cards");
    console.log(player1Cards.children);
    }
    
    
    updateCards();
    chosen1 = false;
    cardchosen = false;
}


function chooseCard (card) {    //card is chosen player card
    if (!cardchosen)
    {
        if (card.parent == player1Cards) {
            var startY = card.y - root.children.length * 50 * 0.5;
            game.add.tween(card).to({ y: startY + 1 * 50, 500: 500 }, 500, Phaser.Easing.Quadratic.Out, true, 1*choosedelay);
            //make clear that this is selected!!!!
            selected1.add(card);    //isnt even used???
            player1Cards.remove(card);   //remove card out of players hand
            //base.add(card);        //send chosen player card to base (?)
            chosen1 = true;
        }
    }
    cardchosen = true;
}

//Call this after each move
function updateCards () {
    layoutGroup(player1Cards, 400, 500, 50, updatedelay);
    layoutGroup(base, 500, 300, 50, updatedelay); 
}

function chooseRoot (card) {
    if (!rootchosen)
    {
        var startY = 170 - root.children.length * 50 * 0.5;
        game.add.tween(card).to({ y: startY + 3 * 50, 500:         500 }, 500, Phaser.Easing.Quadratic.Out, true, 3*choosedelay);
        //disable after first click each round
        //better do it with highlighting the card
     }
    rootchosen = true;    //set to false at next round
}

function update() {

}

var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });
